# ========================================
# üìù Docker Compose para Desenvolvimento
# Configura√ß√£o com volumes para desenvolvimento em tempo real
# ========================================

version: '3.8'

services:
  # Servi√ßo principal da aplica√ß√£o (modo desenvolvimento)
  todo-app-dev:
    # Construir a imagem a partir do Dockerfile local
    build: .
    
    # Nome do container
    container_name: knockout-mvvm-todo-dev
    
    # Mapear porta 8080 do host para 8080 do container
    ports:
      - "8080:8080"
    
    # Volumes para desenvolvimento em tempo real
    volumes:
      - ./index.html:/app/index.html
      - ./app.js:/app/app.js
      - ./style.css:/app/style.css
    
    # Configura√ß√µes de rede
    networks:
      - todo-network-dev
    
    # Configura√ß√µes de restart
    restart: unless-stopped
    
    # Vari√°veis de ambiente para desenvolvimento
    environment:
      - NODE_ENV=development
    
    # Configura√ß√µes de recursos (mais generosas para desenvolvimento)
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

# Rede personalizada para desenvolvimento
networks:
  todo-network-dev:
    driver: bridge
    name: knockout-todo-network-dev

# ========================================
# INSTRU√á√ïES DE USO PARA DESENVOLVIMENTO:
# 
# 1. Iniciar em modo desenvolvimento:
#    docker-compose -f docker-compose.dev.yml up
#
# 2. Iniciar em background:
#    docker-compose -f docker-compose.dev.yml up -d
#
# 3. Parar a aplica√ß√£o:
#    docker-compose -f docker-compose.dev.yml down
#
# 4. Ver logs:
#    docker-compose -f docker-compose.dev.yml logs -f
#
# 5. Acessar a aplica√ß√£o:
#    http://localhost:8080
#
# 6. VANTAGENS DO MODO DEV:
#    - Altera√ß√µes nos arquivos s√£o refletidas automaticamente
#    - N√£o precisa reconstruir a imagem ap√≥s mudan√ßas
#    - Ideal para desenvolvimento e debugging
# ======================================== 