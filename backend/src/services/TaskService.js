const TaskRepository = require('../repositories/TaskRepository');

class TaskService {
  constructor() {
    this.taskRepository = new TaskRepository();
  }

  // Buscar todas as tarefas
  async getAllTasks() {
    try {
      const tasks = await this.taskRepository.findAll();
      console.log('üìÇ Tarefas carregadas do servi√ßo:', tasks.length);
      return tasks;
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo ao buscar tarefas:', error);
      throw error;
    }
  }

  // Buscar tarefa por ID
  async getTaskById(id) {
    try {
      const task = await this.taskRepository.findById(id);
      if (!task) {
        throw new Error('Tarefa n√£o encontrada');
      }
      return task;
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo ao buscar tarefa:', error);
      throw error;
    }
  }

  // Criar nova tarefa
  async createTask(taskData) {
    try {
      // Valida√ß√µes de neg√≥cio
      if (!taskData.text || taskData.text.trim().length === 0) {
        throw new Error('Texto da tarefa √© obrigat√≥rio');
      }

      if (taskData.text.length > 255) {
        throw new Error('Texto da tarefa deve ter no m√°ximo 255 caracteres');
      }

      const task = await this.taskRepository.create({
        text: taskData.text.trim(),
        completed: taskData.completed || false
      });

      console.log('‚úÖ Tarefa criada no servi√ßo:', task.text);
      return task;
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo ao criar tarefa:', error);
      throw error;
    }
  }

  // Atualizar tarefa
  async updateTask(id, updates) {
    try {
      // Valida√ß√µes de neg√≥cio
      if (updates.text !== undefined && (!updates.text || updates.text.trim().length === 0)) {
        throw new Error('Texto da tarefa n√£o pode estar vazio');
      }

      if (updates.text !== undefined && updates.text.length > 255) {
        throw new Error('Texto da tarefa deve ter no m√°ximo 255 caracteres');
      }

      if (updates.text !== undefined) {
        updates.text = updates.text.trim();
      }

      const task = await this.taskRepository.update(id, updates);
      console.log('‚úÖ Tarefa atualizada no servi√ßo:', id);
      return task;
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo ao atualizar tarefa:', error);
      throw error;
    }
  }

  // Remover tarefa
  async deleteTask(id) {
    try {
      await this.taskRepository.delete(id);
      console.log('üóëÔ∏è Tarefa removida do servi√ßo:', id);
      return { message: 'Tarefa removida com sucesso' };
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo ao remover tarefa:', error);
      throw error;
    }
  }

  // Remover tarefas conclu√≠das
  async deleteCompletedTasks() {
    try {
      const deletedCount = await this.taskRepository.deleteCompleted();
      console.log('üóëÔ∏è Tarefas conclu√≠das removidas do servi√ßo:', deletedCount);
      return { 
        message: 'Tarefas conclu√≠das removidas com sucesso',
        deletedCount 
      };
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo ao remover tarefas conclu√≠das:', error);
      throw error;
    }
  }

  // Remover todas as tarefas
  async deleteAllTasks() {
    try {
      const deletedCount = await this.taskRepository.deleteAll();
      console.log('üóëÔ∏è Todas as tarefas removidas do servi√ßo:', deletedCount);
      return { 
        message: 'Todas as tarefas removidas com sucesso',
        deletedCount 
      };
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo ao remover todas as tarefas:', error);
      throw error;
    }
  }

  // Marcar todas como conclu√≠das
  async markAllCompleted() {
    try {
      const updatedCount = await this.taskRepository.markAllCompleted();
      console.log('‚úÖ Todas as tarefas marcadas como conclu√≠das no servi√ßo:', updatedCount);
      return { 
        message: 'Todas as tarefas marcadas como conclu√≠das',
        updatedCount 
      };
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo ao marcar todas como conclu√≠das:', error);
      throw error;
    }
  }

  // Marcar todas como pendentes
  async markAllPending() {
    try {
      const updatedCount = await this.taskRepository.markAllPending();
      console.log('üîÑ Todas as tarefas marcadas como pendentes no servi√ßo:', updatedCount);
      return { 
        message: 'Todas as tarefas marcadas como pendentes',
        updatedCount 
      };
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo ao marcar todas como pendentes:', error);
      throw error;
    }
  }

  // Executar a√ß√£o em massa
  async executeBulkAction(action) {
    try {
      switch (action) {
        case 'markAllCompleted':
          return await this.markAllCompleted();
        case 'markAllPending':
          return await this.markAllPending();
        default:
          throw new Error('A√ß√£o inv√°lida');
      }
    } catch (error) {
      console.error('‚ùå Erro no servi√ßo na a√ß√£o em massa:', error);
      throw error;
    }
  }
}

module.exports = TaskService; 